# This is a basic workflow that is manually triggered

name: Release & Docker push samples

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      bal_dist_version:
        description: Version of Ballerina distribution
        required: true
        default: swan-lake-alpha5
      sample_image_tag:
        description: Version of samples
        required: true
        default: latest
    branches: [main]
jobs:
  docker-push:
    name: Publish sample package
    if: github.repository == 'wso2/choreo-samples'
    runs-on: ubuntu-latest
    env:
      CI_BUILD: true
      CONTAINER_REGISTRY: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
      SAMPLE_IMAGE_TAG: ${{ github.event.inputs.sample_image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Automated Version Bump
        id: version-bump
        uses: phips28/gh-action-bump-version@v8.0.18
        with:
          skip-tag: 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.CHOREO_BOT_TOKEN }}
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11.0.4
          java-package: jdk
          architecture: x64 
      - uses: gagle/package-version@v1.0.0
        id: package-version
      - name: Download ballerina distribution
        uses: wei/wget@v1
        with:
          args: http://dist-dev.ballerina.io/downloads/${{ github.event.inputs.bal_dist_version }}/ballerina-${{ github.event.inputs.bal_dist_version }}.zip
      - run: mkdir extractedDistribution
      - name: Unzip ballerina distribution
        uses: montudor/action-zip@v0.1.0
        with:
          args: unzip -qq ballerina-${{ github.event.inputs.bal_dist_version }}.zip -d extractedDistribution
      - run: sudo cp -R /home/runner/work/choreo-samples/choreo-samples/bala/ballerinax /home/runner/work/choreo-samples/choreo-samples/extractedDistribution/ballerina-${{ github.event.inputs.bal_dist_version }}/distributions/ballerina-slalpha5/repo/bala
      - run: sudo chmod -R 777 /home/runner/work/choreo-samples/choreo-samples/extractedDistribution/ballerina-${{ github.event.inputs.bal_dist_version }}/distributions/ballerina-slalpha5/repo/bala
      - run: sudo chmod -R 777 /home/runner/work/choreo-samples/choreo-samples/extractedDistribution/ballerina-${{ github.event.inputs.bal_dist_version }}/distributions/ballerina-slalpha5/repo/cache
      - name: set environment variables
        uses: allenevans/set-env@v2.0.0
        with:
          BALLERINA_SDK_PATH: '/home/runner/work/choreo-samples/choreo-samples/extractedDistribution/ballerina-${{ github.event.inputs.bal_dist_version }}/distributions/ballerina-slalpha5/'
          BALLERINA_EXEC: '/home/runner/work/choreo-samples/choreo-samples/extractedDistribution/ballerina-${{ github.event.inputs.bal_dist_version }}/distributions/ballerina-slalpha5/bin/bal'
      - run: npm ci
      - run: npm run build --if-present
      - run: npm run gen-st
      - name: Docker-Login
        uses: docker/login-action@v1.8.0
        with:
          username: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
      - name: Build and push samples to ACR
        run: ./scripts/build-and-push-samples.sh
        shell: bash
      - name: Archive Error Log
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: Ballerina Internal Log
          path: samples/ballerina-internal.log
          if-no-files-found: ignore
      - run: sudo rm -R extractedDistribution
      - run: sudo rm ballerina-${{ github.event.inputs.bal_dist_version }}.zip
      - run: npm pack
      - name: Create Release Draft
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.CHOREO_BOT_TOKEN }}
        with:
          tag_name: v${{ steps.package-version.outputs.version }}
          release_name: Choreo samples v${{ steps.package-version.outputs.version }}
          draft: true
          prerelease: true
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.CHOREO_BOT_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./wso2-choreo-samples-${{ steps.package-version.outputs.version }}.tgz
          asset_name: choreo-samples-${{ steps.package-version.outputs.version }}.tgz
          asset_content_type: application/octet-stream







